{"version":3,"sources":["context/battleContext.js","components/enemy.jsx","pages/home.jsx","components/promptbox.jsx","components/player.jsx","pages/battle.jsx","App.js","serviceWorker.js","index.js"],"names":["BattleContext","React","createContext","UpdateMonstersContext","useMonsters","useContext","MonstersUpdate","BattleProvider","children","useState","origin","undefined","attack","run","monsters","setMonsters","Provider","value","obj","Enemy","props","activeMonster","stCall","setActiveMonsterStats","battleStats","setBattleStats","health","setHealth","updateMonsters","useEffect","result","oakdexPokedex","findPokemon","string","name","charAt","toUpperCase","slice","move_learnsets","learnset","base_stats","maxHealth","hp","dmg","move","power","playerStats","atk","def","Math","round","className","Container","Row","Col","Card","style","width","Body","floor","minWidth","src","Home","data","random","localStorage","setItem","JSON","stringify","to","pathname","state","fromNotifications","Button","variant","Promptbox","status","setStatus","gameMonster","setGameMonster","setActiveMonsterMoves","selectAttack","setSelectAttack","show","setShow","handleClose","moveList","stats","movesArray","console","log","findMove","push","baseStats","moves","createMonster","onClick","e","target","map","index","key","names","en","pp","type","parentCallback","Modal","onHide","backdrop","keyboard","Header","closeButton","Title","Table","striped","bordered","hover","Footer","Player","playerAttackInfo","setPlayerAttackInfo","playerAttack","useCallback","childData","flexDirection","sprites","back_default","Battle","parse","getItem","ownMonsters","enemyMonsters","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.102729d3.chunk.js","sourcesContent":["import React, { useContext, useState } from 'react'\n\nconst BattleContext = React.createContext();\nconst UpdateMonstersContext = React.createContext();\n\n//create custom hook\nexport function useMonsters(){\n  return useContext(BattleContext)\n}\n\nexport function MonstersUpdate(){\n  return useContext(UpdateMonstersContext)\n}\n\n\nexport function BattleProvider({ children }) {\n  const [monsters, setMonsters] = useState({origin: undefined, attack: undefined, run: 0});\n  //const [monsters, setMonsters] = useState(true);\n\n  function UpdateMonsters(obj) {\n    if (obj.origin == \"player\"){\n      setMonsters(obj)\n    } else {\n      setMonsters(obj)\n    }\n\n  }\n\n  // function EnemyMonsters(monsterObj){\n  //   setEnemyMonsters(monsterObj)\n  // }\n\n  return (\n    <BattleContext.Provider value={monsters} >\n      <UpdateMonstersContext.Provider value={UpdateMonsters}>\n        {children}\n      </UpdateMonstersContext.Provider>\n    </BattleContext.Provider>\n  )\n\n\n}","import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport axios from 'axios';\nimport Card from 'react-bootstrap/Card';\nimport stCall from '../mockStats.json'\nimport {useMonsters, MonstersUpdate} from '../context/battleContext'\nimport oakdexPokedex from 'oakdex-pokedex';\n\nfunction Enemy(props) {\n  const [activeMonster, setActiveMonster] = useState( props.monsters[0] );\n  const [activeMonsterStats, setActiveMonsterStats] = useState({stCall});\n  const [battleStats, setBattleStats] = useState();\n  const [health, setHealth] = useState(\"100%\")\n\n  const monsters = useMonsters();\n  const updateMonsters = MonstersUpdate();\n\n  function jsUcfirst(string) \n{\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n\n  useEffect(() => {\n\n    if (!battleStats){\n    const result = oakdexPokedex.findPokemon(jsUcfirst(activeMonster.name))\n    setActiveMonsterStats(result)\n    let moveList = result.move_learnsets[0].learnset;\n    result.base_stats.maxHealth = result.base_stats.hp\n    setBattleStats(result.base_stats)\n}\n    if (monsters.origin === \"player\" && monsters.run === 0){\n      let dmg = 2 * (monsters.attack.move.power * monsters.playerStats.atk / battleStats.def) / 50 + 2\n      battleStats.hp -= dmg\n      let health = Math.round(battleStats.hp / battleStats.maxHealth * 100)\n      setHealth(health + \" px\" )\n      updateMonsters({origin: \"enemy\", playerStats: battleStats, attack: undefined, run: 0})\n    }\n    \n\n  },[monsters]);\n\n  // useEffect(async () => {\n  //   const result = await axios.get(activeMonster.url)\n  //   setActiveMonsterStats(result.data)\n\n  // },[activeMonster]);\n\n  return (\n    <div className=\"Enemy\">\n      <Container>\n        <Row className=\"d-flex\">\n          <Col className=\"enemyLeft\">\n            <div className=\"enemyStats\">\n              <Card style={{ width: '100%' }}>\n                <Card.Body className=\"enemyStatsBody\">\n                  <p className=\"monsterName\">{activeMonster.name}</p>\n                  <h5 className=\"monsterLevel mr-2\">Lv5</h5>\n                  <div className=\"enemyLife d-flex\">\n                    {\n                      battleStats && Math.floor(battleStats.hp)\n                    }\n                  <div className=\"enemyHealthBar\" style={{minWidth: health}}>\n\n                  </div>\n                  </div>\n                  \n                </Card.Body>\n              </Card>\n            </div>\n          </Col>\n          <Col className=\"enemyRight\">\n            {/* <div className=\"enemyMonster\" style={{background: \"url(\" + activeMonsterStats.stCall.sprites.front_default + \")\"}}>\n            </div> */}\n            <img className=\"enemyMonster\" src=\"https://cdn.bulbagarden.net/upload/thumb/a/a9/061Poliwhirl.png/250px-061Poliwhirl.png\"/>\n            <div className=\"enemyGround\">\n              </div>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default Enemy;\n","import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport { Link } from \"react-router-dom\";\nimport axios from 'axios';\nimport stCall from '../mockData.json'\n\n\nfunction Home() {\n  const [data, setData] = useState({ stCall });\n  let offset = Math.floor(Math.random() * 141)\n\n\n  // useEffect(async () => {\n  //   const result = await axios.get('https://pokeapi.co/api/v2/pokemon?limit=10&offset=' + offset)\n\n  //   setData(result.data);\n  // },[]);\n\n\n  localStorage.setItem(\"MonsterList\", JSON.stringify(data.stCall))\n\n  return (\n    <div className=\"Home\">\n      <h2>Welcome to the</h2>\n      <h4 className=\"title\">PocketMonster Battle Simulator</h4>\n      <Link to={{\n        pathname: '/battle',\n        state: {\n          fromNotifications: true\n        }\n        }}>\n          <Button variant=\"primary\">Go</Button>{' '}\n      </Link>\n    </div>\n  );\n}\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport axios from 'axios';\nimport Modal from 'react-bootstrap/Modal';\nimport Table from 'react-bootstrap/Table';\nimport oakdexPokedex from 'oakdex-pokedex';\nimport stCall from '../mockStatsPlayer.json';\n\nfunction Promptbox(props) {\n  const [status, setStatus] = useState();\n  const [activeMonster, setActiveMonster] = useState(props.activeMonster);\n  const [activeMonsterStats, setActiveMonsterStats] = useState();\n  const [gameMonster, setGameMonster] = useState();\n  const [activeMonsterMoves, setActiveMonsterMoves] = useState();\n  const [selectAttack, setSelectAttack] = useState();\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n  \n  // returns data/pokemon/eevee.json\n  // console.log(eevee.names.en); // Eeevee\n\n  function jsUcfirst(string) \n{\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n\nfunction attack( selectAttack ){\n  selectAttack.move.pp -= 1;\n  setSelectAttack(\n    {\n      move: selectAttack.move\n    }\n  )\n  props.parentCallback(selectAttack)\n}\n\n\n\n\n\n\n\n\nfunction createMonster(stats, moveList) {\n  let movesArray = []\n  \n  for (let move in moveList ){\n    console.log(oakdexPokedex.findMove(moveList[move]))\n    movesArray.push(oakdexPokedex.findMove(moveList[move].move))\n  }\n  console.log(\"moves: \" + movesArray)\n  return {\n    name: activeMonster.name,\n    baseStats: stats.base_stats,\n    moves: movesArray\n  }\n}\n\n\n\n\n\n\n  useEffect(() => {\n    const result = oakdexPokedex.findPokemon(jsUcfirst(props.activeMonster.name))\n    setActiveMonsterStats(result)\n    let moveList = result.move_learnsets[0].learnset;\n    setActiveMonsterMoves(moveList.slice(0, 4))\n    setGameMonster(createMonster(result, moveList.slice(0, 4)))\n  },[activeMonster]);\n\n  return (<>\n    { !status &&\n\n\n      <>\n        <div className=\"Promptbox\">\n          <div className=\"PromptTextBox\">\n            <p>\n              What will YOU do?\n            {/* {JSON.stringify(activeMonsterStats)} */}\n            </p>\n\n          </div>\n          <div className=\"selectAction\">\n            <div className=\"fight\">\n              <Button onClick={e => setStatus(e.target.value)} value=\"fight\" variant=\"danger\">Fight</Button>{' '}\n            </div>\n            <div className=\"bag\">\n              <Button variant=\"warning\">Bag</Button>{' '}\n            </div>\n            <div className=\"monsters\">\n              <Button onClick={handleShow} variant=\"success\">Monsters</Button>{' '}\n            </div>\n            <div className=\"quit\">\n              <Button variant=\"info\">Quit</Button>{' '}\n            </div>\n          </div>\n        </div>\n      </>\n    }\n\n    { status === \"fight\" &&\n\n\n      <>\n        <div className=\"AttacksBox\">\n          <div className=\"attacks\">\n\n          {\n                gameMonster.moves.map( ( move, index )  => {\n                  return <>\n                      <div key={index}>\n                          <h2 onClick={ () => setSelectAttack({index: index, move: move})}>{move.names.en}</h2>\n                      </div>\n\n                  </>\n                }) \n              }\n\n          </div>\n\n          <div className=\"AttacksStatusBox\">\n          {/* { selectAttack && selectAttack.names.en } */}\n          PP { selectAttack && selectAttack.move.pp}\n          <br></br>\n          Type/{selectAttack && selectAttack.move.type}\n          <br></br>\n            { selectAttack && <Button variant=\"success\" onClick={() => attack( selectAttack )}>Attack</Button>}\n            <Button variant=\"danger\" onClick={e => setStatus(e.target.value)} value={undefined}>Back</Button>{' '}\n          </div>\n\n        </div>\n      </>\n    }\n\n    { show && <>\n      <Modal\n        show={show}\n        onHide={handleClose}\n        backdrop=\"static\"\n        keyboard={false}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Modal title</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n\n          <Table striped bordered hover>\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>Name</th>\n                <th>Status</th>\n                <th>Image</th>\n              </tr>\n            </thead>\n            <tbody>\n              {\n                props.monsters.map( ( {name}, index )  => {\n                  return <>\n                      <tr key={index}>\n                          <td key={index}>{index+1}</td>\n                          <td key={index}>{name}</td>\n                          <td key={index}>\n                            <div className=\"playerHealthBar\">\n                              <div className=\"playerLife\">\n                              </div>\n                            </div>\n                          </td>\n                          <td>\n                            \n                          </td>\n                      </tr>\n\n                  </>\n                }) \n              }\n            </tbody>\n          </Table>\n\n\n\n\n\n\n\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\">Understood</Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n    }\n\n\n\n\n\n\n\n  </>\n  );\n}\n\nexport default Promptbox;\n","import React, { useState, useEffect, useCallback, useContext } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport axios from 'axios';\nimport Card from 'react-bootstrap/Card';\nimport PromptBox from '../components/promptbox';\nimport stCall from '../mockStatsPlayer.json'\nimport {useMonsters, MonstersUpdate} from '../context/battleContext'\nimport oakdexPokedex from 'oakdex-pokedex';\n\n\nfunction Player(props) {\n\n  function jsUcfirst(string) \n{\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n  const [activeMonster, setActiveMonster] = useState( props.monsters[0] );\n  const [activeMonsterStats, setActiveMonsterStats] = useState({stCall});\n  const [playerAttackInfo, setPlayerAttackInfo] = useState()\n  const [battleStats, setBattleStats] = useState();\n\n\n  //context api\n  const monsters = useMonsters();\n  const updateMonsters = MonstersUpdate();\n\n  useEffect(() => {\n    const result = oakdexPokedex.findPokemon(jsUcfirst(activeMonster.name))\n    setActiveMonsterStats(result)\n    setBattleStats(result.base_stats)\n  \n    if (battleStats) updateMonsters({origin: \"player\", playerStats: battleStats, attack: playerAttackInfo, run: 0})\n    \n  },[activeMonster, playerAttackInfo])\n\n\n\n  //get attack info\n  const playerAttack = useCallback((childData) => {\n    setPlayerAttackInfo(childData)\n  },[])\n\n\n\n\n  // useEffect(async () => {\n  //   const result = await axios.get(activeMonster.url)\n  //   setActiveMonsterStats(result.data)\n\n  // },[activeMonster]);\n\n  return (\n    <div className=\"Player\">\n      <Container>\n        <Row className=\"d-flex\" style={{flexDirection: \"row-reverse\"}}>\n          <Col className=\"playerLeft\">\n            <div className=\"playerStats\">\n              <Card style={{ width: '100%' }}>\n                <Card.Body className=\"playerStatsBody\">\n                  <p className=\"monsterName\">{activeMonster.name}</p>\n                  <h5 className=\"monsterLevel mr-2\">Lv5</h5>\n                  <div className=\"playerLife d-flex\">\n                    <h4>HP</h4>\n                  <div className=\"playerHealthBar\">\n\n                  </div>\n                  </div>\n                  \n                </Card.Body>\n              </Card>\n            </div>\n          </Col>\n          <Col className=\"playerRight\">\n            <img className=\"playerMonster\" src={stCall.sprites.back_default}/>\n            <div className=\"playerGround\">\n              </div>\n          </Col>\n        </Row>\n      </Container>\n      <PromptBox parentCallback={playerAttack} monsters={props.monsters} activeMonster={activeMonster} />\n    </div>\n  );\n}\n\nexport default Player;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport { Link } from \"react-router-dom\";\nimport Enemy from '../components/enemy';\nimport Player from '../components/player';\nimport {useMonsters, MonstersUpdate} from '../context/battleContext'\n\n\n\nfunction Battle() {\n    const [data, setData] = useState( JSON.parse(localStorage.getItem(\"MonsterList\")) );\n    const [ownMonsters, setOwnMonsters] = useState( data.slice(0, 5) );\n    const [enemyMonsters, setEnemyMonsters] = useState( data.slice(5, 10) );\n\n    const monsters = useMonsters();\n    const updateMonsters = MonstersUpdate();\n    \n    let callbackFunction = (childData) => {\n      updateMonsters(childData)\n    }\n    \n\n\n      useEffect(() => {\n        console.log(data)\n\n\n\n  },[]);\n\n  return (\n    <div className=\"Battle\">\n        <button onClick={updateMonsters}>X</button>\n        <Enemy monsters={enemyMonsters}/>\n        <Player parentCallback={callbackFunction} monsters={ownMonsters}/>\n    </div>\n  );\n}\n\nexport default Battle;\n","import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Enemy from './components/enemy';\nimport { UserProvider } from './context/battleContext';\nimport Home from './pages/home';\nimport './App.css';\nimport Button from 'react-bootstrap/Button';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Battle from './pages/battle';\nimport {BattleProvider} from './context/battleContext'\n\n\nexport default function App() {\n\n  return (\n    <Router>\n      <BattleProvider>\n      <div>\n        {/* A <Switch> looks through its children <Route>s and\n          renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/battle\">\n          <Battle />\n          </Route>\n          <Route path=\"/users\">\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n      </BattleProvider>\n    </Router>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}